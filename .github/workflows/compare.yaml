name: GitHub Actions Auto-merge
on:
   workflow_dispatch: {}
#    schedule:
#       - cron: "*/5 * * * *"
env:
 USERNAME: "sukanya"
 EMAIL: "sukanya5960@gmail.com"
 ORIGIN_BRANCH: main1
 MERGE_BRANCH: stage1
 
jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-west-2

      - name: Compare main1 and main2
        continue-on-error: true
        run: |
          git config user.name $USERNAME
          git config user.email $EMAIL
          git config pull.rebase false
          git fetch --all
          git checkout -b $ORIGIN_BRANCH origin/$ORIGIN_BRANCH
          git pull origin $ORIGIN_BRANCH
          git checkout -b $MERGE_BRANCH origin/$MERGE_BRANCH
          git pull origin $MERGE_BRANCH
          git branch
          git merge --no-commit --no-ff $ORIGIN_BRANCH  |tee automerge.out
          git branch
      - name: Check for merge conflict
        run: |    
          if grep "Automatic merge failed" automerge.out; then
            echo "Merge conflict detected"
            echo "Sending email alert"
            # Generate a patch of the merge conflict
            patch=$(git diff --name-only --diff-filter=U)
            # Get the full patch contents
            patch_content=$(git diff -U0 $patch)
            echo $patch_content
            # send alert
          elif grep "Already up to date" automerge.out; then
            echo "Nothing to merge, already up to date"
            git status
            git branch
          else
           echo "No merge conflict, please merge main1 to stage1"
          fi
          git merge --abort
